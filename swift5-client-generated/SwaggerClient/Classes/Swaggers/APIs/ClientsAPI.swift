//
// ClientsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ClientsAPI {
    /**
     Update client password

     - parameter body: (body) A JSON object containing the username, new password,
and either the old password, or a reset token.
 
     - parameter accessToken: () client&#x27;s access_token that was previously returned by /login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authChangePasswordPost(body: ChangePasswordRequest, accessToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authChangePasswordPostWithRequestBuilder(body: body, accessToken: accessToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update client password
     - POST /auth/change_password
     - 

     - parameter body: (body) A JSON object containing the username, new password,
and either the old password, or a reset token.
 
     - parameter accessToken: () client&#x27;s access_token that was previously returned by /login 

     - returns: RequestBuilder<Void> 
     */
    open class func authChangePasswordPostWithRequestBuilder(body: ChangePasswordRequest, accessToken: String) -> RequestBuilder<Void> {
        let path = "/auth/change_password"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logs in and returns the authentication access_token cookie

     - parameter body: (body) A JSON object containing the login and password in plaintext.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authLoginPost(body: LoginRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authLoginPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Logs in and returns the authentication access_token cookie
     - POST /auth/login
     - 

     - responseHeaders: [Set-Cookie(String)]
     - parameter body: (body) A JSON object containing the login and password in plaintext.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authLoginPostWithRequestBuilder(body: LoginRequest) -> RequestBuilder<Void> {
        let path = "/auth/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout client and invalidate access_token

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authLogoutPost(accessToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authLogoutPostWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Logout client and invalidate access_token
     - POST /auth/logout

     - responseHeaders: [Set-Cookie(String)]
     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 

     - returns: RequestBuilder<Void> 
     */
    open class func authLogoutPostWithRequestBuilder(accessToken: String) -> RequestBuilder<Void> {
        let path = "/auth/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reset client password

     - parameter body: (body) A JSON object containing the email for the user.
A email will then be sent for password reset.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authResetPost(body: ResetRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authResetPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset client password
     - POST /auth/reset
     - 

     - parameter body: (body) A JSON object containing the email for the user.
A email will then be sent for password reset.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authResetPostWithRequestBuilder(body: ResetRequest) -> RequestBuilder<Void> {
        let path = "/auth/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Confirm client signup

     - parameter body: (body) A JSON object containing the client&#x27;s id for the user.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignupConfirmPost(body: ConfirmRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authSignupConfirmPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Confirm client signup
     - POST /auth/signup/confirm
     - 

     - parameter body: (body) A JSON object containing the client&#x27;s id for the user.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authSignupConfirmPostWithRequestBuilder(body: ConfirmRequest) -> RequestBuilder<Void> {
        let path = "/auth/signup/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sign up client, awaiting registration

     - parameter body: (body) A JSON object containing information required for signup.
See the SignUpRequest schema for more information for fields.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignupPost(body: SignUpRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authSignupPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sign up client, awaiting registration
     - POST /auth/signup
     - 

     - parameter body: (body) A JSON object containing information required for signup.
See the SignUpRequest schema for more information for fields.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authSignupPostWithRequestBuilder(body: SignUpRequest) -> RequestBuilder<Void> {
        let path = "/auth/signup"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get's information about logged in user

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authUserInfoGet(accessToken: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        authUserInfoGetWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get's information about logged in user
     - GET /auth/user_info
     - 

     - examples: [{contentType=application/json, example={
  "last_name" : "calvo",
  "first_name" : "marlon",
  "_userId" : "545bvvvaddfd1345345abc",
  "email" : "marlontest@email.com",
  "username" : "marlonuser"
}}]
     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func authUserInfoGetWithRequestBuilder(accessToken: String) -> RequestBuilder<InlineResponse200> {
        let path = "/auth/user_info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get information about some other user

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter userId: (path) Id for user to lookup 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authUserInfoUserIdGet(accessToken: String, userId: String, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        authUserInfoUserIdGetWithRequestBuilder(accessToken: accessToken, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get information about some other user
     - GET /auth/user_info/{user_id}
     - 

     - examples: [{contentType=application/json, example={
  "last_name" : "calvo",
  "first_name" : "marlon",
  "_userId" : "545bvvvaddfd1345345abc",
  "email" : "marlontest@email.com",
  "username" : "marlonuser"
}}]
     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter userId: (path) Id for user to lookup 

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func authUserInfoUserIdGetWithRequestBuilder(accessToken: String, userId: String) -> RequestBuilder<InlineResponse200> {
        var path = "/auth/user_info/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Returns enumeration types for certain fields

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enumsGet(completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        enumsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns enumeration types for certain fields
     - GET /enums
     - 

     - examples: [{contentType=application/json, example={
  "violations" : [ "No Tag", "Expired Tag" ],
  "locations" : [ "Garage A", "Garage B" ]
}}]

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func enumsGetWithRequestBuilder() -> RequestBuilder<InlineResponse2001> {
        let path = "/enums"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Creates a ticket

     - parameter body: (body) A multipart object containing the information for a ticket.
 
     - parameter accessToken: () client&#x27;s access_token that was previously returned by /login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ticketsCreatePost(body: TicketBase, accessToken: String, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        ticketsCreatePostWithRequestBuilder(body: body, accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Creates a ticket
     - POST /tickets/create
     - 

     - examples: [{contentType=application/json, example={
  "ticket_id" : "a23443434ubf1233"
}}]
     - parameter body: (body) A multipart object containing the information for a ticket.
 
     - parameter accessToken: () client&#x27;s access_token that was previously returned by /login 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func ticketsCreatePostWithRequestBuilder(body: TicketBase, accessToken: String) -> RequestBuilder<InlineResponse2002> {
        let path = "/tickets/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Grabs all tickets with filters

     - parameter userIds: (query) One or more ids  (optional)
     - parameter createdAfter: (query) Get all tickets after specified date in milliseconds. Refer here for time -&gt; https://stackoverflow.com/questions/358207/iphone-how-to-get-current-milliseconds  (optional)
     - parameter createdBefore: (query) Get all tickets before specified date in milliseconds.  (optional)
     - parameter page: (query) Paginated results return at specified page. Combines with limit.  (optional)
     - parameter limit: (query) Paginated resuls return with specified limit. Combines with limit.  (optional)
     - parameter dayStart: (query) All tickets that start at this time during the day, in minutes  (optional)
     - parameter dayEnd: (query) All tickets that end at this time during the day, in minutes  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ticketsQueryGet(userIds: [String]? = nil, createdAfter: Int? = nil, createdBefore: Int? = nil, page: Int? = nil, limit: Int? = nil, dayStart: Int? = nil, dayEnd: Int? = nil, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        ticketsQueryGetWithRequestBuilder(userIds: userIds, createdAfter: createdAfter, createdBefore: createdBefore, page: page, limit: limit, dayStart: dayStart, dayEnd: dayEnd).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Grabs all tickets with filters
     - GET /tickets/query

     - examples: [{contentType=application/json, example={
  "docs" : [ "", "" ]
}}]
     - parameter userIds: (query) One or more ids  (optional)
     - parameter createdAfter: (query) Get all tickets after specified date in milliseconds. Refer here for time -&gt; https://stackoverflow.com/questions/358207/iphone-how-to-get-current-milliseconds  (optional)
     - parameter createdBefore: (query) Get all tickets before specified date in milliseconds.  (optional)
     - parameter page: (query) Paginated results return at specified page. Combines with limit.  (optional)
     - parameter limit: (query) Paginated resuls return with specified limit. Combines with limit.  (optional)
     - parameter dayStart: (query) All tickets that start at this time during the day, in minutes  (optional)
     - parameter dayEnd: (query) All tickets that end at this time during the day, in minutes  (optional)

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func ticketsQueryGetWithRequestBuilder(userIds: [String]? = nil, createdAfter: Int? = nil, createdBefore: Int? = nil, page: Int? = nil, limit: Int? = nil, dayStart: Int? = nil, dayEnd: Int? = nil) -> RequestBuilder<InlineResponse2003> {
        let path = "/tickets/query"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "user_ids": userIds, 
                        "created_after": createdAfter?.encodeToJSON(), 
                        "created_before": createdBefore?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "day_start": dayStart?.encodeToJSON(), 
                        "day_end": dayEnd?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Grabs all tickets with filters

     - parameter userIds: (query) One or more ids  (optional)
     - parameter createdAfter: (query) Get all tickets after specified date in milliseconds. Refer here for time -&gt; https://stackoverflow.com/questions/358207/iphone-how-to-get-current-milliseconds  (optional)
     - parameter createdBefore: (query) Get all tickets before specified date in milliseconds.  (optional)
     - parameter page: (query) Paginated results return at specified page. Combines with limit.  (optional)
     - parameter limit: (query) Paginated resuls return with specified limit. Combines with limit.  (optional)
     - parameter dayStart: (query) All tickets that start at this time during the day, in minutes  (optional)
     - parameter dayEnd: (query) All tickets that end at this time during the day, in minutes  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ticketsStatsGet(userIds: [String]? = nil, createdAfter: Int? = nil, createdBefore: Int? = nil, page: Int? = nil, limit: Int? = nil, dayStart: Int? = nil, dayEnd: Int? = nil, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        ticketsStatsGetWithRequestBuilder(userIds: userIds, createdAfter: createdAfter, createdBefore: createdBefore, page: page, limit: limit, dayStart: dayStart, dayEnd: dayEnd).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Grabs all tickets with filters
     - GET /tickets/stats

     - examples: [{contentType=application/json, example={
  "total_tickets" : 1500,
  "tickets_by_location" : {
    "garage_a" : 40,
    "garage_b" : 32
  },
  "tickets_by_violation" : {
    "expired_tag" : 15,
    "no_tag" : 25,
    "improper_tag" : 35
  }
}}]
     - parameter userIds: (query) One or more ids  (optional)
     - parameter createdAfter: (query) Get all tickets after specified date in milliseconds. Refer here for time -&gt; https://stackoverflow.com/questions/358207/iphone-how-to-get-current-milliseconds  (optional)
     - parameter createdBefore: (query) Get all tickets before specified date in milliseconds.  (optional)
     - parameter page: (query) Paginated results return at specified page. Combines with limit.  (optional)
     - parameter limit: (query) Paginated resuls return with specified limit. Combines with limit.  (optional)
     - parameter dayStart: (query) All tickets that start at this time during the day, in minutes  (optional)
     - parameter dayEnd: (query) All tickets that end at this time during the day, in minutes  (optional)

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func ticketsStatsGetWithRequestBuilder(userIds: [String]? = nil, createdAfter: Int? = nil, createdBefore: Int? = nil, page: Int? = nil, limit: Int? = nil, dayStart: Int? = nil, dayEnd: Int? = nil) -> RequestBuilder<InlineResponse2004> {
        let path = "/tickets/stats"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "user_ids": userIds, 
                        "created_after": createdAfter?.encodeToJSON(), 
                        "created_before": createdBefore?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "day_start": dayStart?.encodeToJSON(), 
                        "day_end": dayEnd?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter ticketId: (path) ticket id returned from database 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ticketsTicketIdGet(accessToken: String, ticketId: String, completion: @escaping ((_ data: DatabaseTicket?,_ error: Error?) -> Void)) {
        ticketsTicketIdGetWithRequestBuilder(accessToken: accessToken, ticketId: ticketId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /tickets/{ticket_id}
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter ticketId: (path) ticket id returned from database 

     - returns: RequestBuilder<DatabaseTicket> 
     */
    open class func ticketsTicketIdGetWithRequestBuilder(accessToken: String, ticketId: String) -> RequestBuilder<DatabaseTicket> {
        var path = "/tickets/{ticket_id}"
        let ticketIdPreEscape = "\(ticketId)"
        let ticketIdPostEscape = ticketIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ticket_id}", with: ticketIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DatabaseTicket>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update ticket

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter ticketId: (path) ticket id returned from database 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ticketsTicketIdPost(accessToken: String, ticketId: String, body: UpdateTicketRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        ticketsTicketIdPostWithRequestBuilder(accessToken: accessToken, ticketId: ticketId, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update ticket
     - POST /tickets/{ticket_id}

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter ticketId: (path) ticket id returned from database 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func ticketsTicketIdPostWithRequestBuilder(accessToken: String, ticketId: String, body: UpdateTicketRequest? = nil) -> RequestBuilder<Void> {
        var path = "/tickets/{ticket_id}"
        let ticketIdPreEscape = "\(ticketId)"
        let ticketIdPostEscape = ticketIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ticket_id}", with: ticketIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
