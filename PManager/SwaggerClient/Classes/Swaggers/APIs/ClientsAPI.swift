//
// ClientsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ClientsAPI {
    /**
     Update client password

     - parameter body: (body) A JSON object containing the username, new password,
and either the old password, or a reset token.
 
     - parameter accessToken: () client&#x27;s access_token that was previously returned by /login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authChangePasswordPost(body: ChangePasswordRequest, accessToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authChangePasswordPostWithRequestBuilder(body: body, accessToken: accessToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update client password
     - POST /auth/change_password
     - 

     - parameter body: (body) A JSON object containing the username, new password,
and either the old password, or a reset token.
 
     - parameter accessToken: () client&#x27;s access_token that was previously returned by /login 

     - returns: RequestBuilder<Void> 
     */
    open class func authChangePasswordPostWithRequestBuilder(body: ChangePasswordRequest, accessToken: String) -> RequestBuilder<Void> {
        let path = "/auth/change_password"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logs in and returns the authentication access_token cookie

     - parameter body: (body) A JSON object containing the login and password in plaintext.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authLoginPost(body: LoginRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authLoginPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Logs in and returns the authentication access_token cookie
     - POST /auth/login
     - 

     - responseHeaders: [Set-Cookie(String)]
     - parameter body: (body) A JSON object containing the login and password in plaintext.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authLoginPostWithRequestBuilder(body: LoginRequest) -> RequestBuilder<Void> {
        let path = "/auth/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Logout client and invalidate access_token

     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authLogoutPost(accessToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authLogoutPostWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Logout client and invalidate access_token
     - POST /auth/logout

     - responseHeaders: [Set-Cookie(String)]
     - parameter accessToken: () client&#x27;s access_token cookie that was previously returned by /login 

     - returns: RequestBuilder<Void> 
     */
    open class func authLogoutPostWithRequestBuilder(accessToken: String) -> RequestBuilder<Void> {
        let path = "/auth/logout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reset client password

     - parameter body: (body) A JSON object containing the email for the user.
A email will then be sent for password reset.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authResetPost(body: ResetRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authResetPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset client password
     - POST /auth/reset
     - 

     - parameter body: (body) A JSON object containing the email for the user.
A email will then be sent for password reset.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authResetPostWithRequestBuilder(body: ResetRequest) -> RequestBuilder<Void> {
        let path = "/auth/reset"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Confirm client signup

     - parameter body: (body) A JSON object containing the client&#x27;s id for the user.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignupConfirmPost(body: ConfirmRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authSignupConfirmPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Confirm client signup
     - POST /auth/signup/confirm
     - 

     - parameter body: (body) A JSON object containing the client&#x27;s id for the user.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authSignupConfirmPostWithRequestBuilder(body: ConfirmRequest) -> RequestBuilder<Void> {
        let path = "/auth/signup/confirm"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sign up client, awaiting registration

     - parameter body: (body) A JSON object containing information required for signup.
See the SignUpRequest schema for more information for fields.
 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignupPost(body: SignUpRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        authSignupPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sign up client, awaiting registration
     - POST /auth/signup
     - 

     - parameter body: (body) A JSON object containing information required for signup.
See the SignUpRequest schema for more information for fields.
 

     - returns: RequestBuilder<Void> 
     */
    open class func authSignupPostWithRequestBuilder(body: SignUpRequest) -> RequestBuilder<Void> {
        let path = "/auth/signup"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
